# 工作目录说明
# 1. srctree 源代码根目录，也即工程起始 Makefile 所在目录
# 2. srctree/out 是各个编译目标的输出目录（BUILD_OUTPUT）
# 3. srctree/out/$(T) 当前编译目标的根目录，包含各种编译器配置的编译输出
# 4. srctree/out/$(T)/CCCFG 当前编译目标当前编译器配置的输出目录（TARGET_OUTPUT）
cur_makefile := $(lastword $(MAKEFILE_LIST))
$(cur_makefile):: ;

.DEFAULT_GOAL := all
PHONY := all
all:

include $(srctree)/scripts/Makefile.alpha

override TARGET_OUTPUT := $(BUILD_OUTPUT)/$(T)/$(CCCFG)
override objtree := $(TARGET_OUTPUT)
override VPATH := $(srctree) $(objtree)

export TARGET_OUTPUT
export objtree
export VPATH

export DELIVER_GOALS := show
export CONFIG_COMPILER := $(subst _, ,$(CCCFG))

filter_deliver_goals = $(if $(or $(filter run,$(MAKECMDGOALS)),$(filter $(1),$(run_target))),run,$(filter $(DELIVER_GOALS),$(MAKECMDGOALS)) all)

TARGET_CCCFGS_FILE := config/$(T)/Makefile.cccfgs
include $(srctree)/$(TARGET_CCCFGS_FILE)
$(srctree)/$(TARGET_CCCFGS_FILE):: ;

TARGET_CONFIG_FILE := config/$(T)/Makefile.target
include $(srctree)/$(TARGET_CONFIG_FILE)
$(srctree)/$(TARGET_CONFIG_FILE):: ;

export CONFIG_BUILD_USING_LIB ?= 0

target-y := $(filter-out %/,$(target-y))

# TODO: 添加环境变量或MAKE变量中额外提供的选项
# CC        C语言编译器
# CFLAGS    C语言编译选项
# LDFLAGS   库搜索目录 -L<lib dir>
# LIBS      链接库 -l<library>
# CPP       C语言预处理器
# CPPFLAGS  预处理选项 -I<include dir>
# CXX       C++编译器
# CXXFLAGS  C++编译选项
COMMON_MACROS := $(filter -D% -U%,$(COMMON_MACROS) $(COMMON_CCFLAGS))
COMMON_INCDIR := $(filter -I%,$(COMMON_INCDIR) $(COMMON_CCFLAGS))
COMMON_LDFLAG := $(filter -L% -l%,$(COMMON_LDFLAG) $(COMMON_CCFLAGS))

# Makefile.cccfgs 可以提供与编译器强相关的编译选项
cccfg_cflags := $($(CCCFG)-cflags-y)
cccfg_aflags := $($(CCCFG)-aflags-y)
cccfg_ldflag := $($(CCCFG)-ldflag-y)

# Makefile.target 提供与编译器无关的而与编译目标强相关的选项
# target-y := default target2 target3 ...      # 每个 target 例如 default 可定义：
# default-y := path/subdir/ ... path/obj.o ... # 需要编译的目录和目标文件
# default-binary-type := dll/exe/exe_run       # 编译目标的类型
# default-target-name := custom_target_name    # 提供定制目标名称，默认使用命令行变量 T 作为名称
# default-target-outs := lst                   # 释放需要额外生成 lst 文件
# default-install-dir := path/dir              # 是否要将编译后的文件复制到指定目录
# default-run-outfile := path/file             # 自动运行编译完的可执行程序并将标准输出的内容保存到文件
# default-ccflags-y := -D -U -Idir -L -l       # 都通过此选项提供所有的选项
# default-macros-y := -Dname -Uname            # 单独提供宏定义
# default-incdir-y := -Idir                    # 单独提供头文件目录
# default-ldflag-y := -Ldir -lfile             # 单独提供库目录和库文件
define eval_target_rule
ifneq ($$(filter exe,$$(subst _, ,$($(1)-binary-type))),)
$(1): dest_name := .target_$(1)
$(1): dest_makefile := $(TARGET_OUTPUT)/.target_$(1)/Makefile.dest
$(1): target_obj_y := $(filter %/ %.o,$($(1)-y))
$(1): target_name := $(call subst_dir_slash,$(if $($(1)-target-name),$($(1)-target-name),$(T)),_)
$(1): target_outs := $($(1)-target-outs) $(filter lst,$(MAKECMDGOALS))
$(1): install_dir := $($(1)-install-dir)
$(1): run_outfile := $($(1)-run-outfile)
$(1): macros_y := $(COMMON_MACROS) $(filter -D% -U%,$($(1)-macros-y) $($(1)-ccflags-y))
$(1): incdir_y := $(COMMON_INCDIR) $(filter -I%,$($(1)-incdir-y) $($(1)-ccflags-y))
$(1): ldflag_y := $(COMMON_LDFLAG) $(filter -L% -l%,$($(1)-ldflag-y) $($(1)-ccflags-y))
$(1): lds_file_y := $($(1)-lds-file-y)
$(1): ldsflags_y := $($(1)-ldsflags-y)
$(1): stack_size_y := $($(1)-stack-size-y)
$(1):
	$$(call echo-info,  [$$(dest_name)])
	@$$(call CMDMKDIR,$(TARGET_OUTPUT)/$$(dest_name))
	@$$(call outfile_new_ex,$$(dest_makefile),$$(target_obj_y),target-obj-y := $$(target_obj_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(target_outs),target-outs-y := $$(target_outs))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(install_dir),install-dir-y := $$(install_dir))
	@$$(call outfile_add_ex,$$(dest_makefile),$(cccfg_aflags),cccfg-aflags-y := $(cccfg_aflags))
	@$$(call outfile_add_ex,$$(dest_makefile),$(cccfg_cflags),cccfg-cflags-y := $(cccfg_cflags))
	@$$(call outfile_add_ex,$$(dest_makefile),$(cccfg_ldflag),cccfg-ldflag-y := $(cccfg_ldflag))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(macros_y),macros-y := $$(macros_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(incdir_y),incdir-y := $$(incdir_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(ldflag_y),ldflag-y := $$(ldflag_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(lds_file_y),lds-file-y := $$(lds_file_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(ldsflags_y),ldsflags-y := $$(ldsflags_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(stack_size_y),stack-size-y := $$(stack_size_y))
	$(Q)$(MAKE) -C $(TARGET_OUTPUT) -f $(srctree)/scripts/Makefile.binary DEST=$$(dest_name) \
	    TARGET_NAME=$$(target_name) TARGET_TYPE=$($(1)-binary-type) RUN_OUTFILE=$$(run_outfile) $$(call filter_deliver_goals,$(1))
else ifneq ($$(filter dll,$$(subst _, ,$($(1)-binary-type))),)
$(1): dest_name := .target_$(1)
$(1): dest_makefile := $(TARGET_OUTPUT)/.target_$(1)/Makefile.dest
$(1): target_obj_y := $(filter %/ %.o,$($(1)-y))
$(1): target_name := $(call subst_dir_slash,$(if $($(1)-target-name),$($(1)-target-name),$(T)),_)
$(1): target_outs := $($(1)-target-outs) $(filter lst,$(MAKECMDGOALS))
$(1): install_dir := $($(1)-install-dir)
$(1): macros_y := $(COMMON_MACROS) $(filter -D% -U%,$($(1)-macros-y) $($(1)-ccflags-y))
$(1): incdir_y := $(COMMON_INCDIR) $(filter -I%,$($(1)-incdir-y) $($(1)-ccflags-y))
$(1): ldflag_y := $(COMMON_LDFLAG) $(filter -L% -l%,$($(1)-ldflag-y) $($(1)-ccflags-y))
$(1): def_file_input_y := $($(1)-def-file-input-y)
$(1): whole_archive_static_lib_y := $($(1)-whole-archive-static-lib-y)
$(1):
	$$(call echo-info,  [$$(dest_name)])
	@$$(call CMDMKDIR,$(TARGET_OUTPUT)/$$(dest_name))
	@$$(call outfile_new_ex,$$(dest_makefile),$$(target_obj_y),target-obj-y := $$(target_obj_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(target_outs),target-outs-y := $$(target_outs))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(install_dir),install-dir-y := $$(install_dir))
	@$$(call outfile_add_ex,$$(dest_makefile),$(cccfg_aflags),cccfg-aflags-y := $(cccfg_aflags))
	@$$(call outfile_add_ex,$$(dest_makefile),$(cccfg_cflags),cccfg-cflags-y := $(cccfg_cflags))
	@$$(call outfile_add_ex,$$(dest_makefile),$(cccfg_ldflag),cccfg-ldflag-y := $(cccfg_ldflag))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(macros_y),macros-y := $$(macros_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(incdir_y),incdir-y := $$(incdir_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(ldflag_y),ldflag-y := $$(ldflag_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(def_file_input_y),def-file-input-y := $$(def_file_input_y))
	@$$(call outfile_add_ex,$$(dest_makefile),$$(whole_archive_static_lib_y),whole-archive-static-lib-y := $$(whole_archive_static_lib_y))
	$(Q)$(MAKE) -C $(TARGET_OUTPUT) -f $(srctree)/scripts/Makefile.binary DEST=$$(dest_name) \
	    TARGET_NAME=$$(target_name) TARGET_TYPE=$($(1)-binary-type) RUN_OUTFILE= $$(call filter_deliver_goals,$(1))
else
$$(error invalid TARGET_TYPE=$($(1)-binary-type))
endif
endef

ifneq ($(target-y),)
$(foreach t,$(target-y),$(eval $(call eval_target_rule,$(t))))
endif

PHONY += $(target-y)
all: $(target-y)
	@:

PHONY += run
run:
	@:

PHONY += show
show:
	$(call echo-info,Start $(srctree):)
	$(call echo-info,  TARGET_OUTPUT=$(TARGET_OUTPUT))
	$(call echo-info,  MAKEFLAGS=$(MAKEFLAGS))
	$(call echo-info,  MAKECMDGOALS=$(MAKECMDGOALS))

PHONY += lst
lst:
	@:

.PHONY: $(PHONY)
